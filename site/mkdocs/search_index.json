{
    "docs": [
        {
            "location": "/", 
            "text": "Octave\n\n\nGNU Octave is software featuring a high-level programming language, primarily intended for numerical computations. Octave helps in solving linear and nonlinear problems numerically, and for performing other numerical experiments using a language that is mostly compatible with MATLAB. It may also be used as a batch-oriented language. Since it is part of the GNU Project, it is free software under the terms of the GNU General Public License.\n\n\nKnown Issues\n\n\nPlot window not responding\n\n\n\n\n\n\n\n\n\n\nSimple Examples\n\n\n\n\n\n\n18.2 Basic Matrix Functions\n\n\n\n\n\n\n8.1 Index Expressions", 
            "title": "<span class='fa fa-home'></span> Home"
        }, 
        {
            "location": "/#octave", 
            "text": "GNU Octave is software featuring a high-level programming language, primarily intended for numerical computations. Octave helps in solving linear and nonlinear problems numerically, and for performing other numerical experiments using a language that is mostly compatible with MATLAB. It may also be used as a batch-oriented language. Since it is part of the GNU Project, it is free software under the terms of the GNU General Public License.", 
            "title": "Octave"
        }, 
        {
            "location": "/#known-issues", 
            "text": "Plot window not responding      Simple Examples    18.2 Basic Matrix Functions    8.1 Index Expressions", 
            "title": "Known Issues"
        }, 
        {
            "location": "/matrix/", 
            "text": "Creating Matrix\n\n\nA = [ 1, 1, 2; 3, 5, 8; 13, 21, 32 ]\nA =\n    1    1    2\n    3    5    8\n   13   21   32\n\n# Creating an 1D column vector\na = [1; 2; 3]\na =\n   1\n   2\n   3\n\n# Creating an 1D row vector\nb = [1 2 3] \nb =\n   1   2   3\n\n# Creating a random m x n matrix\nrand(3, 2)\nans =\n   0.13567   0.51230\n   0.67646   0.19012\n   0.76147   0.89694\n\n# Creating a zero m x n matrix \nzeros(3, 2)\nans =\n   0   0\n   0   0\n   0   0\n\n# Creating an m x n matrix of ones\nones(3,2)\nans =\n   1   1\n   1   1\n   1   1\n\n# Creating an identity matrix\neye(3)\nDiagonal Matrix\n   1   0   0\n   0   1   0\n   0   0   1\n\n# Creating a diagonal matrix\na = [1 2 3]\ndiag(a)\nDiagonal Matrix\n   1   0   0\n   0   2   0\n   0   0   3\n\n\n\n\nAccessing Matrix Elements\n\n\n# Getting the dimension of a matrix\nA = [1 2 3; 4 5 6]\nsize(A)\nans =\n   2   3\n\n# Selecting rows\nA = [1 2 3; 4 5 6; 7 8 9]\nA(1, :)\nans =\n   1   2   3\nA(1:2, :)\nans =\n   1   2   3\n   4   5   6\n\n# Selecting columns\nA = [1 2 3; 4 5 6; 7 8 9]\nA(:, 1)\nans =\n   1\n   4\n   7\nA(:, 1:2)\nans =\n   1   2\n   4   5\n   7   8\n\n# Extracting rows and columns by criteria\nA = [1 2 3; 4 5 9; 7 8 9]\nA(A(:,3) == 9, :)\nans =\n   4   5   9\n   7   8   9\n\n# Accessing elements\nA = [1 2 3; 4 5 6; 7 8 9]\nA(1, 1)\nans =  1\nA(2, 3)\nans =  6\n\n\n\n\nManipulating Shape and Dimensions\n\n\n# Converting a matrix into a row vector (by column)\nA = [1 2 3; 4 5 6; 7 8 9]\nA =\n   1   2   3\n   4   5   6\n   7   8   9\nA(:)\nans =\n   1\n   4\n   7\n   2\n   5\n   8\n   3\n   6\n   9\n\n# Converting row to column vectors\nb = [1 2 3]\nb =\n   1   2   3\nb'\nans =\n   1\n   2\n   3\n\n# Reshaping Matrices\nA = [1 2 3 4; 5 6 7 8; 9 10 11 12]\nA =\n    1    2    3    4\n    5    6    7    8\n    9   10   11   12\nreshape(A,4,3) \nans =\n    1    6   11\n    5   10    4\n    9    3    8\n    2    7   12\n\n# Concatenating matrices\nA = [1 2 3; 4 5 6]\nA =\n   1   2   3\n   4   5   6\nB = [7 8 9; 10 11 12]\nB =\n    7    8    9\n   10   11   12\nC = [A; B]\nC =\n    1    2    3\n    4    5    6\n    7    8    9\n   10   11   12\n\n# Stacking vectors and matrices\na = [1 2 3]\na =\n   1   2   3\nb = [4 5 6]\nb =\n   4   5   6\nc = [a' b']\nc =\n   1   4\n   2   5\n   3   6\n\n\n\n\nBasic Operations\n\n\n# Matrix-scalar operations\nA = [1 2 3; 4 5 6; 7 8 9]\nA =\n   1   2   3\n   4   5   6\n   7   8   9\nA * 2\nans =\n    2    4    6\n    8   10   12\n   14   16   18\nA + 2\nans =\n    3    4    5\n    6    7    8\n    9   10   11\nA - 2\nans =\n  -1   0   1\n   2   3   4\n   5   6   7\nA / 2\nans =\n   0.50000   1.00000   1.50000\n   2.00000   2.50000   3.00000\n   3.50000   4.00000   4.50000\n\n# Matrix-matrix multiplication\nA = [1 2 3; 4 5 6; 7 8 9]\nA =\n   1   2   3\n   4   5   6\n   7   8   9\nA * A\nans =\n    30    36    42\n    66    81    96\n   102   126   150\n\n# Matrix-vector multiplication\nA = [1 2 3; 4 5 6; 7 8 9]\nA =\n   1   2   3\n   4   5   6\n   7   8   9\nb = [ 1; 2; 3 ]\nb =\n   1\n   2\n   3\nA * b\nans =\n   14\n   32\n   50\n\n# Element-wise matrix-matrix operations\nA = [1 2 3; 4 5 6; 7 8 9]\nA =\n   1   2   3\n   4   5   6\n   7   8   9\nA .* A\nans =\n    1    4    9\n   16   25   36\n   49   64   81\nA .+ A\nans =\n    2    4    6\n    8   10   12\n   14   16   18\nA .- A\nans =\n   0   0   0\n   0   0   0\n   0   0   0\nA ./ A\nans =\n   1   1   1\n   1   1   1\n   1   1   1\n\n# Matrix elements to power n\nA = [1 2 3; 4 5 6; 7 8 9]\nA =\n   1   2   3\n   4   5   6\n   7   8   9\nA.^2\nans =\n    1    4    9\n   16   25   36\n   49   64   81\n\n# Matrix to power n\nA = [1 2 3; 4 5 6; 7 8 9]\nA =\n   1   2   3\n   4   5   6\n   7   8   9\nA ^ 2\nans =\n    30    36    42\n    66    81    96\n   102   126   150\n\n\n# Matrix transpose\nA = [1 2 3; 4 5 6; 7 8 9]\nA =\n   1   2   3\n   4   5   6\n   7   8   9\nA'\nans =\n   1   4   7\n   2   5   8\n   3   6   9\n\n# Determinant of a matrix\nA = [6 1 1; 4 -2 5; 2 8 7]\nA =\n   6   1   1\n   4  -2   5\n   2   8   7\ndet(A)\nans = -306\n\n# Inverse of a matrix\nA = [4 7; 2 6]\nA =\n   4   7\n   2   6\ninv(A)\nans =\n   0.60000  -0.70000\n  -0.20000   0.40000\n\n\n\n\nAdvanced Operations\n\n\n# Calculating the covariance matrix of 3 random variables\nx1 = [4.0000 4.2000 3.9000 4.3000 4.1000]'\nx1 =\n   4.0000\n   4.2000\n   3.9000\n   4.3000\n   4.1000\nx2 = [2.0000 2.1000 2.0000 2.1000 2.2000]'\nx2 =\n   2.0000\n   2.1000\n   2.0000\n   2.1000\n   2.2000\nx3 = [0.60000 0.59000 0.58000 0.62000 0.63000]'\nx3 =\n   0.60000\n   0.59000\n   0.58000\n   0.62000\n   0.63000\ncov( [x1,x2,x3] )\nans =\n  2.5000e-002  7.5000e-003  1.7500e-003\n  7.5000e-003  7.0000e-003  1.3500e-003\n  1.7500e-003  1.3500e-003  4.3000e-004\n\n# Calculating eigenvectors and eigenvalues\nA = [3 1; 1 3]\nA =\n   3   1\n   1   3\n[eig_vec,eig_val] = eig(A)\neig_vec =\n  -0.70711   0.70711\n   0.70711   0.70711\neig_val =\nDiagonal Matrix\n   2   0\n   0   4\n\n# Generating a Gaussian dataset\npkg load statistics\nmean = [0 0]\nmean =\n   0   0\ncov = [2 0; 0 2]\ncov =\n   2   0\n   0   2\nmvnrnd(mean,cov,5)\nans =\n  -0.7442485  -0.0099190\n  -1.7695915   0.0418147\n  -0.8780206   0.6145333\n   0.5145315  -0.9834832\n  -1.4736628   0.4570979", 
            "title": "Matrix"
        }, 
        {
            "location": "/matrix/#creating-matrix", 
            "text": "A = [ 1, 1, 2; 3, 5, 8; 13, 21, 32 ]\nA =\n    1    1    2\n    3    5    8\n   13   21   32\n\n# Creating an 1D column vector\na = [1; 2; 3]\na =\n   1\n   2\n   3\n\n# Creating an 1D row vector\nb = [1 2 3] \nb =\n   1   2   3\n\n# Creating a random m x n matrix\nrand(3, 2)\nans =\n   0.13567   0.51230\n   0.67646   0.19012\n   0.76147   0.89694\n\n# Creating a zero m x n matrix \nzeros(3, 2)\nans =\n   0   0\n   0   0\n   0   0\n\n# Creating an m x n matrix of ones\nones(3,2)\nans =\n   1   1\n   1   1\n   1   1\n\n# Creating an identity matrix\neye(3)\nDiagonal Matrix\n   1   0   0\n   0   1   0\n   0   0   1\n\n# Creating a diagonal matrix\na = [1 2 3]\ndiag(a)\nDiagonal Matrix\n   1   0   0\n   0   2   0\n   0   0   3", 
            "title": "Creating Matrix"
        }, 
        {
            "location": "/matrix/#accessing-matrix-elements", 
            "text": "# Getting the dimension of a matrix\nA = [1 2 3; 4 5 6]\nsize(A)\nans =\n   2   3\n\n# Selecting rows\nA = [1 2 3; 4 5 6; 7 8 9]\nA(1, :)\nans =\n   1   2   3\nA(1:2, :)\nans =\n   1   2   3\n   4   5   6\n\n# Selecting columns\nA = [1 2 3; 4 5 6; 7 8 9]\nA(:, 1)\nans =\n   1\n   4\n   7\nA(:, 1:2)\nans =\n   1   2\n   4   5\n   7   8\n\n# Extracting rows and columns by criteria\nA = [1 2 3; 4 5 9; 7 8 9]\nA(A(:,3) == 9, :)\nans =\n   4   5   9\n   7   8   9\n\n# Accessing elements\nA = [1 2 3; 4 5 6; 7 8 9]\nA(1, 1)\nans =  1\nA(2, 3)\nans =  6", 
            "title": "Accessing Matrix Elements"
        }, 
        {
            "location": "/matrix/#manipulating-shape-and-dimensions", 
            "text": "# Converting a matrix into a row vector (by column)\nA = [1 2 3; 4 5 6; 7 8 9]\nA =\n   1   2   3\n   4   5   6\n   7   8   9\nA(:)\nans =\n   1\n   4\n   7\n   2\n   5\n   8\n   3\n   6\n   9\n\n# Converting row to column vectors\nb = [1 2 3]\nb =\n   1   2   3\nb'\nans =\n   1\n   2\n   3\n\n# Reshaping Matrices\nA = [1 2 3 4; 5 6 7 8; 9 10 11 12]\nA =\n    1    2    3    4\n    5    6    7    8\n    9   10   11   12\nreshape(A,4,3) \nans =\n    1    6   11\n    5   10    4\n    9    3    8\n    2    7   12\n\n# Concatenating matrices\nA = [1 2 3; 4 5 6]\nA =\n   1   2   3\n   4   5   6\nB = [7 8 9; 10 11 12]\nB =\n    7    8    9\n   10   11   12\nC = [A; B]\nC =\n    1    2    3\n    4    5    6\n    7    8    9\n   10   11   12\n\n# Stacking vectors and matrices\na = [1 2 3]\na =\n   1   2   3\nb = [4 5 6]\nb =\n   4   5   6\nc = [a' b']\nc =\n   1   4\n   2   5\n   3   6", 
            "title": "Manipulating Shape and Dimensions"
        }, 
        {
            "location": "/matrix/#basic-operations", 
            "text": "# Matrix-scalar operations\nA = [1 2 3; 4 5 6; 7 8 9]\nA =\n   1   2   3\n   4   5   6\n   7   8   9\nA * 2\nans =\n    2    4    6\n    8   10   12\n   14   16   18\nA + 2\nans =\n    3    4    5\n    6    7    8\n    9   10   11\nA - 2\nans =\n  -1   0   1\n   2   3   4\n   5   6   7\nA / 2\nans =\n   0.50000   1.00000   1.50000\n   2.00000   2.50000   3.00000\n   3.50000   4.00000   4.50000\n\n# Matrix-matrix multiplication\nA = [1 2 3; 4 5 6; 7 8 9]\nA =\n   1   2   3\n   4   5   6\n   7   8   9\nA * A\nans =\n    30    36    42\n    66    81    96\n   102   126   150\n\n# Matrix-vector multiplication\nA = [1 2 3; 4 5 6; 7 8 9]\nA =\n   1   2   3\n   4   5   6\n   7   8   9\nb = [ 1; 2; 3 ]\nb =\n   1\n   2\n   3\nA * b\nans =\n   14\n   32\n   50\n\n# Element-wise matrix-matrix operations\nA = [1 2 3; 4 5 6; 7 8 9]\nA =\n   1   2   3\n   4   5   6\n   7   8   9\nA .* A\nans =\n    1    4    9\n   16   25   36\n   49   64   81\nA .+ A\nans =\n    2    4    6\n    8   10   12\n   14   16   18\nA .- A\nans =\n   0   0   0\n   0   0   0\n   0   0   0\nA ./ A\nans =\n   1   1   1\n   1   1   1\n   1   1   1\n\n# Matrix elements to power n\nA = [1 2 3; 4 5 6; 7 8 9]\nA =\n   1   2   3\n   4   5   6\n   7   8   9\nA.^2\nans =\n    1    4    9\n   16   25   36\n   49   64   81\n\n# Matrix to power n\nA = [1 2 3; 4 5 6; 7 8 9]\nA =\n   1   2   3\n   4   5   6\n   7   8   9\nA ^ 2\nans =\n    30    36    42\n    66    81    96\n   102   126   150\n\n\n# Matrix transpose\nA = [1 2 3; 4 5 6; 7 8 9]\nA =\n   1   2   3\n   4   5   6\n   7   8   9\nA'\nans =\n   1   4   7\n   2   5   8\n   3   6   9\n\n# Determinant of a matrix\nA = [6 1 1; 4 -2 5; 2 8 7]\nA =\n   6   1   1\n   4  -2   5\n   2   8   7\ndet(A)\nans = -306\n\n# Inverse of a matrix\nA = [4 7; 2 6]\nA =\n   4   7\n   2   6\ninv(A)\nans =\n   0.60000  -0.70000\n  -0.20000   0.40000", 
            "title": "Basic Operations"
        }, 
        {
            "location": "/matrix/#advanced-operations", 
            "text": "# Calculating the covariance matrix of 3 random variables\nx1 = [4.0000 4.2000 3.9000 4.3000 4.1000]'\nx1 =\n   4.0000\n   4.2000\n   3.9000\n   4.3000\n   4.1000\nx2 = [2.0000 2.1000 2.0000 2.1000 2.2000]'\nx2 =\n   2.0000\n   2.1000\n   2.0000\n   2.1000\n   2.2000\nx3 = [0.60000 0.59000 0.58000 0.62000 0.63000]'\nx3 =\n   0.60000\n   0.59000\n   0.58000\n   0.62000\n   0.63000\ncov( [x1,x2,x3] )\nans =\n  2.5000e-002  7.5000e-003  1.7500e-003\n  7.5000e-003  7.0000e-003  1.3500e-003\n  1.7500e-003  1.3500e-003  4.3000e-004\n\n# Calculating eigenvectors and eigenvalues\nA = [3 1; 1 3]\nA =\n   3   1\n   1   3\n[eig_vec,eig_val] = eig(A)\neig_vec =\n  -0.70711   0.70711\n   0.70711   0.70711\neig_val =\nDiagonal Matrix\n   2   0\n   0   4\n\n# Generating a Gaussian dataset\npkg load statistics\nmean = [0 0]\nmean =\n   0   0\ncov = [2 0; 0 2]\ncov =\n   2   0\n   0   2\nmvnrnd(mean,cov,5)\nans =\n  -0.7442485  -0.0099190\n  -1.7695915   0.0418147\n  -0.8780206   0.6145333\n   0.5145315  -0.9834832\n  -1.4736628   0.4570979", 
            "title": "Advanced Operations"
        }
    ]
}